
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cartao
 * 
 */
export type Cartao = $Result.DefaultSelection<Prisma.$CartaoPayload>
/**
 * Model Porta
 * 
 */
export type Porta = $Result.DefaultSelection<Prisma.$PortaPayload>
/**
 * Model Acesso
 * 
 */
export type Acesso = $Result.DefaultSelection<Prisma.$AcessoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cartaos
 * const cartaos = await prisma.cartao.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cartaos
   * const cartaos = await prisma.cartao.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cartao`: Exposes CRUD operations for the **Cartao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cartaos
    * const cartaos = await prisma.cartao.findMany()
    * ```
    */
  get cartao(): Prisma.CartaoDelegate<ExtArgs>;

  /**
   * `prisma.porta`: Exposes CRUD operations for the **Porta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Portas
    * const portas = await prisma.porta.findMany()
    * ```
    */
  get porta(): Prisma.PortaDelegate<ExtArgs>;

  /**
   * `prisma.acesso`: Exposes CRUD operations for the **Acesso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Acessos
    * const acessos = await prisma.acesso.findMany()
    * ```
    */
  get acesso(): Prisma.AcessoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.0
   * Query Engine version: 08713a93b99d58f31485621c634b04983ae01d95
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cartao: 'Cartao',
    Porta: 'Porta',
    Acesso: 'Acesso'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "cartao" | "porta" | "acesso"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Cartao: {
        payload: Prisma.$CartaoPayload<ExtArgs>
        fields: Prisma.CartaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          findFirst: {
            args: Prisma.CartaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          findMany: {
            args: Prisma.CartaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>[]
          }
          create: {
            args: Prisma.CartaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          createMany: {
            args: Prisma.CartaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>[]
          }
          delete: {
            args: Prisma.CartaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          update: {
            args: Prisma.CartaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          deleteMany: {
            args: Prisma.CartaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CartaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartaoPayload>
          }
          aggregate: {
            args: Prisma.CartaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartao>
          }
          groupBy: {
            args: Prisma.CartaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartaoCountArgs<ExtArgs>
            result: $Utils.Optional<CartaoCountAggregateOutputType> | number
          }
        }
      }
      Porta: {
        payload: Prisma.$PortaPayload<ExtArgs>
        fields: Prisma.PortaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>
          }
          findFirst: {
            args: Prisma.PortaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>
          }
          findMany: {
            args: Prisma.PortaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>[]
          }
          create: {
            args: Prisma.PortaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>
          }
          createMany: {
            args: Prisma.PortaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PortaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>[]
          }
          delete: {
            args: Prisma.PortaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>
          }
          update: {
            args: Prisma.PortaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>
          }
          deleteMany: {
            args: Prisma.PortaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PortaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PortaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortaPayload>
          }
          aggregate: {
            args: Prisma.PortaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePorta>
          }
          groupBy: {
            args: Prisma.PortaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PortaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortaCountArgs<ExtArgs>
            result: $Utils.Optional<PortaCountAggregateOutputType> | number
          }
        }
      }
      Acesso: {
        payload: Prisma.$AcessoPayload<ExtArgs>
        fields: Prisma.AcessoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcessoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcessoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>
          }
          findFirst: {
            args: Prisma.AcessoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcessoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>
          }
          findMany: {
            args: Prisma.AcessoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>[]
          }
          create: {
            args: Prisma.AcessoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>
          }
          createMany: {
            args: Prisma.AcessoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AcessoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>[]
          }
          delete: {
            args: Prisma.AcessoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>
          }
          update: {
            args: Prisma.AcessoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>
          }
          deleteMany: {
            args: Prisma.AcessoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcessoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AcessoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcessoPayload>
          }
          aggregate: {
            args: Prisma.AcessoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcesso>
          }
          groupBy: {
            args: Prisma.AcessoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcessoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcessoCountArgs<ExtArgs>
            result: $Utils.Optional<AcessoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CartaoCountOutputType
   */

  export type CartaoCountOutputType = {
    PortasPermitidas: number
    Acessos: number
  }

  export type CartaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PortasPermitidas?: boolean | CartaoCountOutputTypeCountPortasPermitidasArgs
    Acessos?: boolean | CartaoCountOutputTypeCountAcessosArgs
  }

  // Custom InputTypes
  /**
   * CartaoCountOutputType without action
   */
  export type CartaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartaoCountOutputType
     */
    select?: CartaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CartaoCountOutputType without action
   */
  export type CartaoCountOutputTypeCountPortasPermitidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortaWhereInput
  }

  /**
   * CartaoCountOutputType without action
   */
  export type CartaoCountOutputTypeCountAcessosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcessoWhereInput
  }


  /**
   * Count Type PortaCountOutputType
   */

  export type PortaCountOutputType = {
    CartoesPermitidos: number
    Acessos: number
  }

  export type PortaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CartoesPermitidos?: boolean | PortaCountOutputTypeCountCartoesPermitidosArgs
    Acessos?: boolean | PortaCountOutputTypeCountAcessosArgs
  }

  // Custom InputTypes
  /**
   * PortaCountOutputType without action
   */
  export type PortaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortaCountOutputType
     */
    select?: PortaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PortaCountOutputType without action
   */
  export type PortaCountOutputTypeCountCartoesPermitidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaoWhereInput
  }

  /**
   * PortaCountOutputType without action
   */
  export type PortaCountOutputTypeCountAcessosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcessoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Cartao
   */

  export type AggregateCartao = {
    _count: CartaoCountAggregateOutputType | null
    _min: CartaoMinAggregateOutputType | null
    _max: CartaoMaxAggregateOutputType | null
  }

  export type CartaoMinAggregateOutputType = {
    id: string | null
  }

  export type CartaoMaxAggregateOutputType = {
    id: string | null
  }

  export type CartaoCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type CartaoMinAggregateInputType = {
    id?: true
  }

  export type CartaoMaxAggregateInputType = {
    id?: true
  }

  export type CartaoCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type CartaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cartao to aggregate.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cartaos
    **/
    _count?: true | CartaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartaoMaxAggregateInputType
  }

  export type GetCartaoAggregateType<T extends CartaoAggregateArgs> = {
        [P in keyof T & keyof AggregateCartao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartao[P]>
      : GetScalarType<T[P], AggregateCartao[P]>
  }




  export type CartaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartaoWhereInput
    orderBy?: CartaoOrderByWithAggregationInput | CartaoOrderByWithAggregationInput[]
    by: CartaoScalarFieldEnum[] | CartaoScalarFieldEnum
    having?: CartaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartaoCountAggregateInputType | true
    _min?: CartaoMinAggregateInputType
    _max?: CartaoMaxAggregateInputType
  }

  export type CartaoGroupByOutputType = {
    id: string
    _count: CartaoCountAggregateOutputType | null
    _min: CartaoMinAggregateOutputType | null
    _max: CartaoMaxAggregateOutputType | null
  }

  type GetCartaoGroupByPayload<T extends CartaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartaoGroupByOutputType[P]>
            : GetScalarType<T[P], CartaoGroupByOutputType[P]>
        }
      >
    >


  export type CartaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    PortasPermitidas?: boolean | Cartao$PortasPermitidasArgs<ExtArgs>
    Acessos?: boolean | Cartao$AcessosArgs<ExtArgs>
    _count?: boolean | CartaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartao"]>

  export type CartaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["cartao"]>

  export type CartaoSelectScalar = {
    id?: boolean
  }

  export type CartaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PortasPermitidas?: boolean | Cartao$PortasPermitidasArgs<ExtArgs>
    Acessos?: boolean | Cartao$AcessosArgs<ExtArgs>
    _count?: boolean | CartaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CartaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CartaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cartao"
    objects: {
      PortasPermitidas: Prisma.$PortaPayload<ExtArgs>[]
      Acessos: Prisma.$AcessoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
    }, ExtArgs["result"]["cartao"]>
    composites: {}
  }

  type CartaoGetPayload<S extends boolean | null | undefined | CartaoDefaultArgs> = $Result.GetResult<Prisma.$CartaoPayload, S>

  type CartaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CartaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CartaoCountAggregateInputType | true
    }

  export interface CartaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cartao'], meta: { name: 'Cartao' } }
    /**
     * Find zero or one Cartao that matches the filter.
     * @param {CartaoFindUniqueArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartaoFindUniqueArgs>(args: SelectSubset<T, CartaoFindUniqueArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cartao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CartaoFindUniqueOrThrowArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartaoFindUniqueOrThrowArgs>(args: SelectSubset<T, CartaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cartao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoFindFirstArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartaoFindFirstArgs>(args?: SelectSubset<T, CartaoFindFirstArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cartao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoFindFirstOrThrowArgs} args - Arguments to find a Cartao
     * @example
     * // Get one Cartao
     * const cartao = await prisma.cartao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartaoFindFirstOrThrowArgs>(args?: SelectSubset<T, CartaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cartaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cartaos
     * const cartaos = await prisma.cartao.findMany()
     * 
     * // Get first 10 Cartaos
     * const cartaos = await prisma.cartao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartaoWithIdOnly = await prisma.cartao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartaoFindManyArgs>(args?: SelectSubset<T, CartaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cartao.
     * @param {CartaoCreateArgs} args - Arguments to create a Cartao.
     * @example
     * // Create one Cartao
     * const Cartao = await prisma.cartao.create({
     *   data: {
     *     // ... data to create a Cartao
     *   }
     * })
     * 
     */
    create<T extends CartaoCreateArgs>(args: SelectSubset<T, CartaoCreateArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cartaos.
     * @param {CartaoCreateManyArgs} args - Arguments to create many Cartaos.
     * @example
     * // Create many Cartaos
     * const cartao = await prisma.cartao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartaoCreateManyArgs>(args?: SelectSubset<T, CartaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cartaos and returns the data saved in the database.
     * @param {CartaoCreateManyAndReturnArgs} args - Arguments to create many Cartaos.
     * @example
     * // Create many Cartaos
     * const cartao = await prisma.cartao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cartaos and only return the `id`
     * const cartaoWithIdOnly = await prisma.cartao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartaoCreateManyAndReturnArgs>(args?: SelectSubset<T, CartaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cartao.
     * @param {CartaoDeleteArgs} args - Arguments to delete one Cartao.
     * @example
     * // Delete one Cartao
     * const Cartao = await prisma.cartao.delete({
     *   where: {
     *     // ... filter to delete one Cartao
     *   }
     * })
     * 
     */
    delete<T extends CartaoDeleteArgs>(args: SelectSubset<T, CartaoDeleteArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cartao.
     * @param {CartaoUpdateArgs} args - Arguments to update one Cartao.
     * @example
     * // Update one Cartao
     * const cartao = await prisma.cartao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartaoUpdateArgs>(args: SelectSubset<T, CartaoUpdateArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cartaos.
     * @param {CartaoDeleteManyArgs} args - Arguments to filter Cartaos to delete.
     * @example
     * // Delete a few Cartaos
     * const { count } = await prisma.cartao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartaoDeleteManyArgs>(args?: SelectSubset<T, CartaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cartaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cartaos
     * const cartao = await prisma.cartao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartaoUpdateManyArgs>(args: SelectSubset<T, CartaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cartao.
     * @param {CartaoUpsertArgs} args - Arguments to update or create a Cartao.
     * @example
     * // Update or create a Cartao
     * const cartao = await prisma.cartao.upsert({
     *   create: {
     *     // ... data to create a Cartao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cartao we want to update
     *   }
     * })
     */
    upsert<T extends CartaoUpsertArgs>(args: SelectSubset<T, CartaoUpsertArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cartaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoCountArgs} args - Arguments to filter Cartaos to count.
     * @example
     * // Count the number of Cartaos
     * const count = await prisma.cartao.count({
     *   where: {
     *     // ... the filter for the Cartaos we want to count
     *   }
     * })
    **/
    count<T extends CartaoCountArgs>(
      args?: Subset<T, CartaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cartao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartaoAggregateArgs>(args: Subset<T, CartaoAggregateArgs>): Prisma.PrismaPromise<GetCartaoAggregateType<T>>

    /**
     * Group by Cartao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartaoGroupByArgs['orderBy'] }
        : { orderBy?: CartaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cartao model
   */
  readonly fields: CartaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cartao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PortasPermitidas<T extends Cartao$PortasPermitidasArgs<ExtArgs> = {}>(args?: Subset<T, Cartao$PortasPermitidasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findMany"> | Null>
    Acessos<T extends Cartao$AcessosArgs<ExtArgs> = {}>(args?: Subset<T, Cartao$AcessosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cartao model
   */ 
  interface CartaoFieldRefs {
    readonly id: FieldRef<"Cartao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cartao findUnique
   */
  export type CartaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao findUniqueOrThrow
   */
  export type CartaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao findFirst
   */
  export type CartaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartaos.
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartaos.
     */
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Cartao findFirstOrThrow
   */
  export type CartaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * Filter, which Cartao to fetch.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cartaos.
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cartaos.
     */
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Cartao findMany
   */
  export type CartaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * Filter, which Cartaos to fetch.
     */
    where?: CartaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cartaos to fetch.
     */
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cartaos.
     */
    cursor?: CartaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cartaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cartaos.
     */
    skip?: number
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Cartao create
   */
  export type CartaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Cartao.
     */
    data?: XOR<CartaoCreateInput, CartaoUncheckedCreateInput>
  }

  /**
   * Cartao createMany
   */
  export type CartaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cartaos.
     */
    data: CartaoCreateManyInput | CartaoCreateManyInput[]
  }

  /**
   * Cartao createManyAndReturn
   */
  export type CartaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cartaos.
     */
    data: CartaoCreateManyInput | CartaoCreateManyInput[]
  }

  /**
   * Cartao update
   */
  export type CartaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Cartao.
     */
    data: XOR<CartaoUpdateInput, CartaoUncheckedUpdateInput>
    /**
     * Choose, which Cartao to update.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao updateMany
   */
  export type CartaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cartaos.
     */
    data: XOR<CartaoUpdateManyMutationInput, CartaoUncheckedUpdateManyInput>
    /**
     * Filter which Cartaos to update
     */
    where?: CartaoWhereInput
  }

  /**
   * Cartao upsert
   */
  export type CartaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Cartao to update in case it exists.
     */
    where: CartaoWhereUniqueInput
    /**
     * In case the Cartao found by the `where` argument doesn't exist, create a new Cartao with this data.
     */
    create: XOR<CartaoCreateInput, CartaoUncheckedCreateInput>
    /**
     * In case the Cartao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartaoUpdateInput, CartaoUncheckedUpdateInput>
  }

  /**
   * Cartao delete
   */
  export type CartaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    /**
     * Filter which Cartao to delete.
     */
    where: CartaoWhereUniqueInput
  }

  /**
   * Cartao deleteMany
   */
  export type CartaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cartaos to delete
     */
    where?: CartaoWhereInput
  }

  /**
   * Cartao.PortasPermitidas
   */
  export type Cartao$PortasPermitidasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    where?: PortaWhereInput
    orderBy?: PortaOrderByWithRelationInput | PortaOrderByWithRelationInput[]
    cursor?: PortaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortaScalarFieldEnum | PortaScalarFieldEnum[]
  }

  /**
   * Cartao.Acessos
   */
  export type Cartao$AcessosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    where?: AcessoWhereInput
    orderBy?: AcessoOrderByWithRelationInput | AcessoOrderByWithRelationInput[]
    cursor?: AcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcessoScalarFieldEnum | AcessoScalarFieldEnum[]
  }

  /**
   * Cartao without action
   */
  export type CartaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
  }


  /**
   * Model Porta
   */

  export type AggregatePorta = {
    _count: PortaCountAggregateOutputType | null
    _min: PortaMinAggregateOutputType | null
    _max: PortaMaxAggregateOutputType | null
  }

  export type PortaMinAggregateOutputType = {
    id: string | null
  }

  export type PortaMaxAggregateOutputType = {
    id: string | null
  }

  export type PortaCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type PortaMinAggregateInputType = {
    id?: true
  }

  export type PortaMaxAggregateInputType = {
    id?: true
  }

  export type PortaCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type PortaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Porta to aggregate.
     */
    where?: PortaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portas to fetch.
     */
    orderBy?: PortaOrderByWithRelationInput | PortaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Portas
    **/
    _count?: true | PortaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortaMaxAggregateInputType
  }

  export type GetPortaAggregateType<T extends PortaAggregateArgs> = {
        [P in keyof T & keyof AggregatePorta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePorta[P]>
      : GetScalarType<T[P], AggregatePorta[P]>
  }




  export type PortaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortaWhereInput
    orderBy?: PortaOrderByWithAggregationInput | PortaOrderByWithAggregationInput[]
    by: PortaScalarFieldEnum[] | PortaScalarFieldEnum
    having?: PortaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortaCountAggregateInputType | true
    _min?: PortaMinAggregateInputType
    _max?: PortaMaxAggregateInputType
  }

  export type PortaGroupByOutputType = {
    id: string
    _count: PortaCountAggregateOutputType | null
    _min: PortaMinAggregateOutputType | null
    _max: PortaMaxAggregateOutputType | null
  }

  type GetPortaGroupByPayload<T extends PortaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortaGroupByOutputType[P]>
            : GetScalarType<T[P], PortaGroupByOutputType[P]>
        }
      >
    >


  export type PortaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    CartoesPermitidos?: boolean | Porta$CartoesPermitidosArgs<ExtArgs>
    Acessos?: boolean | Porta$AcessosArgs<ExtArgs>
    _count?: boolean | PortaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["porta"]>

  export type PortaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["porta"]>

  export type PortaSelectScalar = {
    id?: boolean
  }

  export type PortaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CartoesPermitidos?: boolean | Porta$CartoesPermitidosArgs<ExtArgs>
    Acessos?: boolean | Porta$AcessosArgs<ExtArgs>
    _count?: boolean | PortaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PortaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PortaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Porta"
    objects: {
      CartoesPermitidos: Prisma.$CartaoPayload<ExtArgs>[]
      Acessos: Prisma.$AcessoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
    }, ExtArgs["result"]["porta"]>
    composites: {}
  }

  type PortaGetPayload<S extends boolean | null | undefined | PortaDefaultArgs> = $Result.GetResult<Prisma.$PortaPayload, S>

  type PortaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PortaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PortaCountAggregateInputType | true
    }

  export interface PortaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Porta'], meta: { name: 'Porta' } }
    /**
     * Find zero or one Porta that matches the filter.
     * @param {PortaFindUniqueArgs} args - Arguments to find a Porta
     * @example
     * // Get one Porta
     * const porta = await prisma.porta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PortaFindUniqueArgs>(args: SelectSubset<T, PortaFindUniqueArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Porta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PortaFindUniqueOrThrowArgs} args - Arguments to find a Porta
     * @example
     * // Get one Porta
     * const porta = await prisma.porta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PortaFindUniqueOrThrowArgs>(args: SelectSubset<T, PortaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Porta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaFindFirstArgs} args - Arguments to find a Porta
     * @example
     * // Get one Porta
     * const porta = await prisma.porta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PortaFindFirstArgs>(args?: SelectSubset<T, PortaFindFirstArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Porta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaFindFirstOrThrowArgs} args - Arguments to find a Porta
     * @example
     * // Get one Porta
     * const porta = await prisma.porta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PortaFindFirstOrThrowArgs>(args?: SelectSubset<T, PortaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Portas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Portas
     * const portas = await prisma.porta.findMany()
     * 
     * // Get first 10 Portas
     * const portas = await prisma.porta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portaWithIdOnly = await prisma.porta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PortaFindManyArgs>(args?: SelectSubset<T, PortaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Porta.
     * @param {PortaCreateArgs} args - Arguments to create a Porta.
     * @example
     * // Create one Porta
     * const Porta = await prisma.porta.create({
     *   data: {
     *     // ... data to create a Porta
     *   }
     * })
     * 
     */
    create<T extends PortaCreateArgs>(args: SelectSubset<T, PortaCreateArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Portas.
     * @param {PortaCreateManyArgs} args - Arguments to create many Portas.
     * @example
     * // Create many Portas
     * const porta = await prisma.porta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PortaCreateManyArgs>(args?: SelectSubset<T, PortaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Portas and returns the data saved in the database.
     * @param {PortaCreateManyAndReturnArgs} args - Arguments to create many Portas.
     * @example
     * // Create many Portas
     * const porta = await prisma.porta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Portas and only return the `id`
     * const portaWithIdOnly = await prisma.porta.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PortaCreateManyAndReturnArgs>(args?: SelectSubset<T, PortaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Porta.
     * @param {PortaDeleteArgs} args - Arguments to delete one Porta.
     * @example
     * // Delete one Porta
     * const Porta = await prisma.porta.delete({
     *   where: {
     *     // ... filter to delete one Porta
     *   }
     * })
     * 
     */
    delete<T extends PortaDeleteArgs>(args: SelectSubset<T, PortaDeleteArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Porta.
     * @param {PortaUpdateArgs} args - Arguments to update one Porta.
     * @example
     * // Update one Porta
     * const porta = await prisma.porta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PortaUpdateArgs>(args: SelectSubset<T, PortaUpdateArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Portas.
     * @param {PortaDeleteManyArgs} args - Arguments to filter Portas to delete.
     * @example
     * // Delete a few Portas
     * const { count } = await prisma.porta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PortaDeleteManyArgs>(args?: SelectSubset<T, PortaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Portas
     * const porta = await prisma.porta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PortaUpdateManyArgs>(args: SelectSubset<T, PortaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Porta.
     * @param {PortaUpsertArgs} args - Arguments to update or create a Porta.
     * @example
     * // Update or create a Porta
     * const porta = await prisma.porta.upsert({
     *   create: {
     *     // ... data to create a Porta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Porta we want to update
     *   }
     * })
     */
    upsert<T extends PortaUpsertArgs>(args: SelectSubset<T, PortaUpsertArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Portas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaCountArgs} args - Arguments to filter Portas to count.
     * @example
     * // Count the number of Portas
     * const count = await prisma.porta.count({
     *   where: {
     *     // ... the filter for the Portas we want to count
     *   }
     * })
    **/
    count<T extends PortaCountArgs>(
      args?: Subset<T, PortaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Porta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortaAggregateArgs>(args: Subset<T, PortaAggregateArgs>): Prisma.PrismaPromise<GetPortaAggregateType<T>>

    /**
     * Group by Porta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortaGroupByArgs['orderBy'] }
        : { orderBy?: PortaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Porta model
   */
  readonly fields: PortaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Porta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CartoesPermitidos<T extends Porta$CartoesPermitidosArgs<ExtArgs> = {}>(args?: Subset<T, Porta$CartoesPermitidosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findMany"> | Null>
    Acessos<T extends Porta$AcessosArgs<ExtArgs> = {}>(args?: Subset<T, Porta$AcessosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Porta model
   */ 
  interface PortaFieldRefs {
    readonly id: FieldRef<"Porta", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Porta findUnique
   */
  export type PortaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * Filter, which Porta to fetch.
     */
    where: PortaWhereUniqueInput
  }

  /**
   * Porta findUniqueOrThrow
   */
  export type PortaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * Filter, which Porta to fetch.
     */
    where: PortaWhereUniqueInput
  }

  /**
   * Porta findFirst
   */
  export type PortaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * Filter, which Porta to fetch.
     */
    where?: PortaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portas to fetch.
     */
    orderBy?: PortaOrderByWithRelationInput | PortaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portas.
     */
    cursor?: PortaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portas.
     */
    distinct?: PortaScalarFieldEnum | PortaScalarFieldEnum[]
  }

  /**
   * Porta findFirstOrThrow
   */
  export type PortaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * Filter, which Porta to fetch.
     */
    where?: PortaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portas to fetch.
     */
    orderBy?: PortaOrderByWithRelationInput | PortaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portas.
     */
    cursor?: PortaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portas.
     */
    distinct?: PortaScalarFieldEnum | PortaScalarFieldEnum[]
  }

  /**
   * Porta findMany
   */
  export type PortaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * Filter, which Portas to fetch.
     */
    where?: PortaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portas to fetch.
     */
    orderBy?: PortaOrderByWithRelationInput | PortaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Portas.
     */
    cursor?: PortaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portas.
     */
    skip?: number
    distinct?: PortaScalarFieldEnum | PortaScalarFieldEnum[]
  }

  /**
   * Porta create
   */
  export type PortaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * The data needed to create a Porta.
     */
    data?: XOR<PortaCreateInput, PortaUncheckedCreateInput>
  }

  /**
   * Porta createMany
   */
  export type PortaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Portas.
     */
    data: PortaCreateManyInput | PortaCreateManyInput[]
  }

  /**
   * Porta createManyAndReturn
   */
  export type PortaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Portas.
     */
    data: PortaCreateManyInput | PortaCreateManyInput[]
  }

  /**
   * Porta update
   */
  export type PortaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * The data needed to update a Porta.
     */
    data: XOR<PortaUpdateInput, PortaUncheckedUpdateInput>
    /**
     * Choose, which Porta to update.
     */
    where: PortaWhereUniqueInput
  }

  /**
   * Porta updateMany
   */
  export type PortaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Portas.
     */
    data: XOR<PortaUpdateManyMutationInput, PortaUncheckedUpdateManyInput>
    /**
     * Filter which Portas to update
     */
    where?: PortaWhereInput
  }

  /**
   * Porta upsert
   */
  export type PortaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * The filter to search for the Porta to update in case it exists.
     */
    where: PortaWhereUniqueInput
    /**
     * In case the Porta found by the `where` argument doesn't exist, create a new Porta with this data.
     */
    create: XOR<PortaCreateInput, PortaUncheckedCreateInput>
    /**
     * In case the Porta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortaUpdateInput, PortaUncheckedUpdateInput>
  }

  /**
   * Porta delete
   */
  export type PortaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
    /**
     * Filter which Porta to delete.
     */
    where: PortaWhereUniqueInput
  }

  /**
   * Porta deleteMany
   */
  export type PortaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portas to delete
     */
    where?: PortaWhereInput
  }

  /**
   * Porta.CartoesPermitidos
   */
  export type Porta$CartoesPermitidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cartao
     */
    select?: CartaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartaoInclude<ExtArgs> | null
    where?: CartaoWhereInput
    orderBy?: CartaoOrderByWithRelationInput | CartaoOrderByWithRelationInput[]
    cursor?: CartaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartaoScalarFieldEnum | CartaoScalarFieldEnum[]
  }

  /**
   * Porta.Acessos
   */
  export type Porta$AcessosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    where?: AcessoWhereInput
    orderBy?: AcessoOrderByWithRelationInput | AcessoOrderByWithRelationInput[]
    cursor?: AcessoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcessoScalarFieldEnum | AcessoScalarFieldEnum[]
  }

  /**
   * Porta without action
   */
  export type PortaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Porta
     */
    select?: PortaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortaInclude<ExtArgs> | null
  }


  /**
   * Model Acesso
   */

  export type AggregateAcesso = {
    _count: AcessoCountAggregateOutputType | null
    _avg: AcessoAvgAggregateOutputType | null
    _sum: AcessoSumAggregateOutputType | null
    _min: AcessoMinAggregateOutputType | null
    _max: AcessoMaxAggregateOutputType | null
  }

  export type AcessoAvgAggregateOutputType = {
    idAcesso: number | null
  }

  export type AcessoSumAggregateOutputType = {
    idAcesso: number | null
  }

  export type AcessoMinAggregateOutputType = {
    idAcesso: number | null
    idCartao: string | null
    idPorta: string | null
    dataInteracao: Date | null
    liberado: boolean | null
  }

  export type AcessoMaxAggregateOutputType = {
    idAcesso: number | null
    idCartao: string | null
    idPorta: string | null
    dataInteracao: Date | null
    liberado: boolean | null
  }

  export type AcessoCountAggregateOutputType = {
    idAcesso: number
    idCartao: number
    idPorta: number
    dataInteracao: number
    liberado: number
    _all: number
  }


  export type AcessoAvgAggregateInputType = {
    idAcesso?: true
  }

  export type AcessoSumAggregateInputType = {
    idAcesso?: true
  }

  export type AcessoMinAggregateInputType = {
    idAcesso?: true
    idCartao?: true
    idPorta?: true
    dataInteracao?: true
    liberado?: true
  }

  export type AcessoMaxAggregateInputType = {
    idAcesso?: true
    idCartao?: true
    idPorta?: true
    dataInteracao?: true
    liberado?: true
  }

  export type AcessoCountAggregateInputType = {
    idAcesso?: true
    idCartao?: true
    idPorta?: true
    dataInteracao?: true
    liberado?: true
    _all?: true
  }

  export type AcessoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Acesso to aggregate.
     */
    where?: AcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acessos to fetch.
     */
    orderBy?: AcessoOrderByWithRelationInput | AcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Acessos
    **/
    _count?: true | AcessoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcessoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcessoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcessoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcessoMaxAggregateInputType
  }

  export type GetAcessoAggregateType<T extends AcessoAggregateArgs> = {
        [P in keyof T & keyof AggregateAcesso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcesso[P]>
      : GetScalarType<T[P], AggregateAcesso[P]>
  }




  export type AcessoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcessoWhereInput
    orderBy?: AcessoOrderByWithAggregationInput | AcessoOrderByWithAggregationInput[]
    by: AcessoScalarFieldEnum[] | AcessoScalarFieldEnum
    having?: AcessoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcessoCountAggregateInputType | true
    _avg?: AcessoAvgAggregateInputType
    _sum?: AcessoSumAggregateInputType
    _min?: AcessoMinAggregateInputType
    _max?: AcessoMaxAggregateInputType
  }

  export type AcessoGroupByOutputType = {
    idAcesso: number
    idCartao: string
    idPorta: string
    dataInteracao: Date
    liberado: boolean
    _count: AcessoCountAggregateOutputType | null
    _avg: AcessoAvgAggregateOutputType | null
    _sum: AcessoSumAggregateOutputType | null
    _min: AcessoMinAggregateOutputType | null
    _max: AcessoMaxAggregateOutputType | null
  }

  type GetAcessoGroupByPayload<T extends AcessoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcessoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcessoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcessoGroupByOutputType[P]>
            : GetScalarType<T[P], AcessoGroupByOutputType[P]>
        }
      >
    >


  export type AcessoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idAcesso?: boolean
    idCartao?: boolean
    idPorta?: boolean
    dataInteracao?: boolean
    liberado?: boolean
    cartao?: boolean | CartaoDefaultArgs<ExtArgs>
    porta?: boolean | PortaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["acesso"]>

  export type AcessoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idAcesso?: boolean
    idCartao?: boolean
    idPorta?: boolean
    dataInteracao?: boolean
    liberado?: boolean
    cartao?: boolean | CartaoDefaultArgs<ExtArgs>
    porta?: boolean | PortaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["acesso"]>

  export type AcessoSelectScalar = {
    idAcesso?: boolean
    idCartao?: boolean
    idPorta?: boolean
    dataInteracao?: boolean
    liberado?: boolean
  }

  export type AcessoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartao?: boolean | CartaoDefaultArgs<ExtArgs>
    porta?: boolean | PortaDefaultArgs<ExtArgs>
  }
  export type AcessoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cartao?: boolean | CartaoDefaultArgs<ExtArgs>
    porta?: boolean | PortaDefaultArgs<ExtArgs>
  }

  export type $AcessoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Acesso"
    objects: {
      cartao: Prisma.$CartaoPayload<ExtArgs>
      porta: Prisma.$PortaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idAcesso: number
      idCartao: string
      idPorta: string
      dataInteracao: Date
      liberado: boolean
    }, ExtArgs["result"]["acesso"]>
    composites: {}
  }

  type AcessoGetPayload<S extends boolean | null | undefined | AcessoDefaultArgs> = $Result.GetResult<Prisma.$AcessoPayload, S>

  type AcessoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AcessoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AcessoCountAggregateInputType | true
    }

  export interface AcessoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Acesso'], meta: { name: 'Acesso' } }
    /**
     * Find zero or one Acesso that matches the filter.
     * @param {AcessoFindUniqueArgs} args - Arguments to find a Acesso
     * @example
     * // Get one Acesso
     * const acesso = await prisma.acesso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcessoFindUniqueArgs>(args: SelectSubset<T, AcessoFindUniqueArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Acesso that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AcessoFindUniqueOrThrowArgs} args - Arguments to find a Acesso
     * @example
     * // Get one Acesso
     * const acesso = await prisma.acesso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcessoFindUniqueOrThrowArgs>(args: SelectSubset<T, AcessoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Acesso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoFindFirstArgs} args - Arguments to find a Acesso
     * @example
     * // Get one Acesso
     * const acesso = await prisma.acesso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcessoFindFirstArgs>(args?: SelectSubset<T, AcessoFindFirstArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Acesso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoFindFirstOrThrowArgs} args - Arguments to find a Acesso
     * @example
     * // Get one Acesso
     * const acesso = await prisma.acesso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcessoFindFirstOrThrowArgs>(args?: SelectSubset<T, AcessoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Acessos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Acessos
     * const acessos = await prisma.acesso.findMany()
     * 
     * // Get first 10 Acessos
     * const acessos = await prisma.acesso.findMany({ take: 10 })
     * 
     * // Only select the `idAcesso`
     * const acessoWithIdAcessoOnly = await prisma.acesso.findMany({ select: { idAcesso: true } })
     * 
     */
    findMany<T extends AcessoFindManyArgs>(args?: SelectSubset<T, AcessoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Acesso.
     * @param {AcessoCreateArgs} args - Arguments to create a Acesso.
     * @example
     * // Create one Acesso
     * const Acesso = await prisma.acesso.create({
     *   data: {
     *     // ... data to create a Acesso
     *   }
     * })
     * 
     */
    create<T extends AcessoCreateArgs>(args: SelectSubset<T, AcessoCreateArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Acessos.
     * @param {AcessoCreateManyArgs} args - Arguments to create many Acessos.
     * @example
     * // Create many Acessos
     * const acesso = await prisma.acesso.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcessoCreateManyArgs>(args?: SelectSubset<T, AcessoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Acessos and returns the data saved in the database.
     * @param {AcessoCreateManyAndReturnArgs} args - Arguments to create many Acessos.
     * @example
     * // Create many Acessos
     * const acesso = await prisma.acesso.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Acessos and only return the `idAcesso`
     * const acessoWithIdAcessoOnly = await prisma.acesso.createManyAndReturn({ 
     *   select: { idAcesso: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AcessoCreateManyAndReturnArgs>(args?: SelectSubset<T, AcessoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Acesso.
     * @param {AcessoDeleteArgs} args - Arguments to delete one Acesso.
     * @example
     * // Delete one Acesso
     * const Acesso = await prisma.acesso.delete({
     *   where: {
     *     // ... filter to delete one Acesso
     *   }
     * })
     * 
     */
    delete<T extends AcessoDeleteArgs>(args: SelectSubset<T, AcessoDeleteArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Acesso.
     * @param {AcessoUpdateArgs} args - Arguments to update one Acesso.
     * @example
     * // Update one Acesso
     * const acesso = await prisma.acesso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcessoUpdateArgs>(args: SelectSubset<T, AcessoUpdateArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Acessos.
     * @param {AcessoDeleteManyArgs} args - Arguments to filter Acessos to delete.
     * @example
     * // Delete a few Acessos
     * const { count } = await prisma.acesso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcessoDeleteManyArgs>(args?: SelectSubset<T, AcessoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Acessos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Acessos
     * const acesso = await prisma.acesso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcessoUpdateManyArgs>(args: SelectSubset<T, AcessoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Acesso.
     * @param {AcessoUpsertArgs} args - Arguments to update or create a Acesso.
     * @example
     * // Update or create a Acesso
     * const acesso = await prisma.acesso.upsert({
     *   create: {
     *     // ... data to create a Acesso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Acesso we want to update
     *   }
     * })
     */
    upsert<T extends AcessoUpsertArgs>(args: SelectSubset<T, AcessoUpsertArgs<ExtArgs>>): Prisma__AcessoClient<$Result.GetResult<Prisma.$AcessoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Acessos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoCountArgs} args - Arguments to filter Acessos to count.
     * @example
     * // Count the number of Acessos
     * const count = await prisma.acesso.count({
     *   where: {
     *     // ... the filter for the Acessos we want to count
     *   }
     * })
    **/
    count<T extends AcessoCountArgs>(
      args?: Subset<T, AcessoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcessoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Acesso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcessoAggregateArgs>(args: Subset<T, AcessoAggregateArgs>): Prisma.PrismaPromise<GetAcessoAggregateType<T>>

    /**
     * Group by Acesso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcessoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcessoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcessoGroupByArgs['orderBy'] }
        : { orderBy?: AcessoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcessoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcessoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Acesso model
   */
  readonly fields: AcessoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Acesso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcessoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cartao<T extends CartaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CartaoDefaultArgs<ExtArgs>>): Prisma__CartaoClient<$Result.GetResult<Prisma.$CartaoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    porta<T extends PortaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PortaDefaultArgs<ExtArgs>>): Prisma__PortaClient<$Result.GetResult<Prisma.$PortaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Acesso model
   */ 
  interface AcessoFieldRefs {
    readonly idAcesso: FieldRef<"Acesso", 'Int'>
    readonly idCartao: FieldRef<"Acesso", 'String'>
    readonly idPorta: FieldRef<"Acesso", 'String'>
    readonly dataInteracao: FieldRef<"Acesso", 'DateTime'>
    readonly liberado: FieldRef<"Acesso", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Acesso findUnique
   */
  export type AcessoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * Filter, which Acesso to fetch.
     */
    where: AcessoWhereUniqueInput
  }

  /**
   * Acesso findUniqueOrThrow
   */
  export type AcessoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * Filter, which Acesso to fetch.
     */
    where: AcessoWhereUniqueInput
  }

  /**
   * Acesso findFirst
   */
  export type AcessoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * Filter, which Acesso to fetch.
     */
    where?: AcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acessos to fetch.
     */
    orderBy?: AcessoOrderByWithRelationInput | AcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Acessos.
     */
    cursor?: AcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Acessos.
     */
    distinct?: AcessoScalarFieldEnum | AcessoScalarFieldEnum[]
  }

  /**
   * Acesso findFirstOrThrow
   */
  export type AcessoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * Filter, which Acesso to fetch.
     */
    where?: AcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acessos to fetch.
     */
    orderBy?: AcessoOrderByWithRelationInput | AcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Acessos.
     */
    cursor?: AcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acessos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Acessos.
     */
    distinct?: AcessoScalarFieldEnum | AcessoScalarFieldEnum[]
  }

  /**
   * Acesso findMany
   */
  export type AcessoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * Filter, which Acessos to fetch.
     */
    where?: AcessoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Acessos to fetch.
     */
    orderBy?: AcessoOrderByWithRelationInput | AcessoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Acessos.
     */
    cursor?: AcessoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Acessos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Acessos.
     */
    skip?: number
    distinct?: AcessoScalarFieldEnum | AcessoScalarFieldEnum[]
  }

  /**
   * Acesso create
   */
  export type AcessoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * The data needed to create a Acesso.
     */
    data: XOR<AcessoCreateInput, AcessoUncheckedCreateInput>
  }

  /**
   * Acesso createMany
   */
  export type AcessoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Acessos.
     */
    data: AcessoCreateManyInput | AcessoCreateManyInput[]
  }

  /**
   * Acesso createManyAndReturn
   */
  export type AcessoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Acessos.
     */
    data: AcessoCreateManyInput | AcessoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Acesso update
   */
  export type AcessoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * The data needed to update a Acesso.
     */
    data: XOR<AcessoUpdateInput, AcessoUncheckedUpdateInput>
    /**
     * Choose, which Acesso to update.
     */
    where: AcessoWhereUniqueInput
  }

  /**
   * Acesso updateMany
   */
  export type AcessoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Acessos.
     */
    data: XOR<AcessoUpdateManyMutationInput, AcessoUncheckedUpdateManyInput>
    /**
     * Filter which Acessos to update
     */
    where?: AcessoWhereInput
  }

  /**
   * Acesso upsert
   */
  export type AcessoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * The filter to search for the Acesso to update in case it exists.
     */
    where: AcessoWhereUniqueInput
    /**
     * In case the Acesso found by the `where` argument doesn't exist, create a new Acesso with this data.
     */
    create: XOR<AcessoCreateInput, AcessoUncheckedCreateInput>
    /**
     * In case the Acesso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcessoUpdateInput, AcessoUncheckedUpdateInput>
  }

  /**
   * Acesso delete
   */
  export type AcessoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
    /**
     * Filter which Acesso to delete.
     */
    where: AcessoWhereUniqueInput
  }

  /**
   * Acesso deleteMany
   */
  export type AcessoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Acessos to delete
     */
    where?: AcessoWhereInput
  }

  /**
   * Acesso without action
   */
  export type AcessoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acesso
     */
    select?: AcessoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcessoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CartaoScalarFieldEnum: {
    id: 'id'
  };

  export type CartaoScalarFieldEnum = (typeof CartaoScalarFieldEnum)[keyof typeof CartaoScalarFieldEnum]


  export const PortaScalarFieldEnum: {
    id: 'id'
  };

  export type PortaScalarFieldEnum = (typeof PortaScalarFieldEnum)[keyof typeof PortaScalarFieldEnum]


  export const AcessoScalarFieldEnum: {
    idAcesso: 'idAcesso',
    idCartao: 'idCartao',
    idPorta: 'idPorta',
    dataInteracao: 'dataInteracao',
    liberado: 'liberado'
  };

  export type AcessoScalarFieldEnum = (typeof AcessoScalarFieldEnum)[keyof typeof AcessoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CartaoWhereInput = {
    AND?: CartaoWhereInput | CartaoWhereInput[]
    OR?: CartaoWhereInput[]
    NOT?: CartaoWhereInput | CartaoWhereInput[]
    id?: StringFilter<"Cartao"> | string
    PortasPermitidas?: PortaListRelationFilter
    Acessos?: AcessoListRelationFilter
  }

  export type CartaoOrderByWithRelationInput = {
    id?: SortOrder
    PortasPermitidas?: PortaOrderByRelationAggregateInput
    Acessos?: AcessoOrderByRelationAggregateInput
  }

  export type CartaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CartaoWhereInput | CartaoWhereInput[]
    OR?: CartaoWhereInput[]
    NOT?: CartaoWhereInput | CartaoWhereInput[]
    PortasPermitidas?: PortaListRelationFilter
    Acessos?: AcessoListRelationFilter
  }, "id">

  export type CartaoOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: CartaoCountOrderByAggregateInput
    _max?: CartaoMaxOrderByAggregateInput
    _min?: CartaoMinOrderByAggregateInput
  }

  export type CartaoScalarWhereWithAggregatesInput = {
    AND?: CartaoScalarWhereWithAggregatesInput | CartaoScalarWhereWithAggregatesInput[]
    OR?: CartaoScalarWhereWithAggregatesInput[]
    NOT?: CartaoScalarWhereWithAggregatesInput | CartaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cartao"> | string
  }

  export type PortaWhereInput = {
    AND?: PortaWhereInput | PortaWhereInput[]
    OR?: PortaWhereInput[]
    NOT?: PortaWhereInput | PortaWhereInput[]
    id?: StringFilter<"Porta"> | string
    CartoesPermitidos?: CartaoListRelationFilter
    Acessos?: AcessoListRelationFilter
  }

  export type PortaOrderByWithRelationInput = {
    id?: SortOrder
    CartoesPermitidos?: CartaoOrderByRelationAggregateInput
    Acessos?: AcessoOrderByRelationAggregateInput
  }

  export type PortaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PortaWhereInput | PortaWhereInput[]
    OR?: PortaWhereInput[]
    NOT?: PortaWhereInput | PortaWhereInput[]
    CartoesPermitidos?: CartaoListRelationFilter
    Acessos?: AcessoListRelationFilter
  }, "id">

  export type PortaOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: PortaCountOrderByAggregateInput
    _max?: PortaMaxOrderByAggregateInput
    _min?: PortaMinOrderByAggregateInput
  }

  export type PortaScalarWhereWithAggregatesInput = {
    AND?: PortaScalarWhereWithAggregatesInput | PortaScalarWhereWithAggregatesInput[]
    OR?: PortaScalarWhereWithAggregatesInput[]
    NOT?: PortaScalarWhereWithAggregatesInput | PortaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Porta"> | string
  }

  export type AcessoWhereInput = {
    AND?: AcessoWhereInput | AcessoWhereInput[]
    OR?: AcessoWhereInput[]
    NOT?: AcessoWhereInput | AcessoWhereInput[]
    idAcesso?: IntFilter<"Acesso"> | number
    idCartao?: StringFilter<"Acesso"> | string
    idPorta?: StringFilter<"Acesso"> | string
    dataInteracao?: DateTimeFilter<"Acesso"> | Date | string
    liberado?: BoolFilter<"Acesso"> | boolean
    cartao?: XOR<CartaoRelationFilter, CartaoWhereInput>
    porta?: XOR<PortaRelationFilter, PortaWhereInput>
  }

  export type AcessoOrderByWithRelationInput = {
    idAcesso?: SortOrder
    idCartao?: SortOrder
    idPorta?: SortOrder
    dataInteracao?: SortOrder
    liberado?: SortOrder
    cartao?: CartaoOrderByWithRelationInput
    porta?: PortaOrderByWithRelationInput
  }

  export type AcessoWhereUniqueInput = Prisma.AtLeast<{
    idAcesso?: number
    AND?: AcessoWhereInput | AcessoWhereInput[]
    OR?: AcessoWhereInput[]
    NOT?: AcessoWhereInput | AcessoWhereInput[]
    idCartao?: StringFilter<"Acesso"> | string
    idPorta?: StringFilter<"Acesso"> | string
    dataInteracao?: DateTimeFilter<"Acesso"> | Date | string
    liberado?: BoolFilter<"Acesso"> | boolean
    cartao?: XOR<CartaoRelationFilter, CartaoWhereInput>
    porta?: XOR<PortaRelationFilter, PortaWhereInput>
  }, "idAcesso">

  export type AcessoOrderByWithAggregationInput = {
    idAcesso?: SortOrder
    idCartao?: SortOrder
    idPorta?: SortOrder
    dataInteracao?: SortOrder
    liberado?: SortOrder
    _count?: AcessoCountOrderByAggregateInput
    _avg?: AcessoAvgOrderByAggregateInput
    _max?: AcessoMaxOrderByAggregateInput
    _min?: AcessoMinOrderByAggregateInput
    _sum?: AcessoSumOrderByAggregateInput
  }

  export type AcessoScalarWhereWithAggregatesInput = {
    AND?: AcessoScalarWhereWithAggregatesInput | AcessoScalarWhereWithAggregatesInput[]
    OR?: AcessoScalarWhereWithAggregatesInput[]
    NOT?: AcessoScalarWhereWithAggregatesInput | AcessoScalarWhereWithAggregatesInput[]
    idAcesso?: IntWithAggregatesFilter<"Acesso"> | number
    idCartao?: StringWithAggregatesFilter<"Acesso"> | string
    idPorta?: StringWithAggregatesFilter<"Acesso"> | string
    dataInteracao?: DateTimeWithAggregatesFilter<"Acesso"> | Date | string
    liberado?: BoolWithAggregatesFilter<"Acesso"> | boolean
  }

  export type CartaoCreateInput = {
    id?: string
    PortasPermitidas?: PortaCreateNestedManyWithoutCartoesPermitidosInput
    Acessos?: AcessoCreateNestedManyWithoutCartaoInput
  }

  export type CartaoUncheckedCreateInput = {
    id?: string
    PortasPermitidas?: PortaUncheckedCreateNestedManyWithoutCartoesPermitidosInput
    Acessos?: AcessoUncheckedCreateNestedManyWithoutCartaoInput
  }

  export type CartaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    PortasPermitidas?: PortaUpdateManyWithoutCartoesPermitidosNestedInput
    Acessos?: AcessoUpdateManyWithoutCartaoNestedInput
  }

  export type CartaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    PortasPermitidas?: PortaUncheckedUpdateManyWithoutCartoesPermitidosNestedInput
    Acessos?: AcessoUncheckedUpdateManyWithoutCartaoNestedInput
  }

  export type CartaoCreateManyInput = {
    id?: string
  }

  export type CartaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type CartaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PortaCreateInput = {
    id?: string
    CartoesPermitidos?: CartaoCreateNestedManyWithoutPortasPermitidasInput
    Acessos?: AcessoCreateNestedManyWithoutPortaInput
  }

  export type PortaUncheckedCreateInput = {
    id?: string
    CartoesPermitidos?: CartaoUncheckedCreateNestedManyWithoutPortasPermitidasInput
    Acessos?: AcessoUncheckedCreateNestedManyWithoutPortaInput
  }

  export type PortaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    CartoesPermitidos?: CartaoUpdateManyWithoutPortasPermitidasNestedInput
    Acessos?: AcessoUpdateManyWithoutPortaNestedInput
  }

  export type PortaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    CartoesPermitidos?: CartaoUncheckedUpdateManyWithoutPortasPermitidasNestedInput
    Acessos?: AcessoUncheckedUpdateManyWithoutPortaNestedInput
  }

  export type PortaCreateManyInput = {
    id?: string
  }

  export type PortaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PortaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AcessoCreateInput = {
    dataInteracao: Date | string
    liberado: boolean
    cartao: CartaoCreateNestedOneWithoutAcessosInput
    porta: PortaCreateNestedOneWithoutAcessosInput
  }

  export type AcessoUncheckedCreateInput = {
    idAcesso?: number
    idCartao: string
    idPorta: string
    dataInteracao: Date | string
    liberado: boolean
  }

  export type AcessoUpdateInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
    cartao?: CartaoUpdateOneRequiredWithoutAcessosNestedInput
    porta?: PortaUpdateOneRequiredWithoutAcessosNestedInput
  }

  export type AcessoUncheckedUpdateInput = {
    idAcesso?: IntFieldUpdateOperationsInput | number
    idCartao?: StringFieldUpdateOperationsInput | string
    idPorta?: StringFieldUpdateOperationsInput | string
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AcessoCreateManyInput = {
    idAcesso?: number
    idCartao: string
    idPorta: string
    dataInteracao: Date | string
    liberado: boolean
  }

  export type AcessoUpdateManyMutationInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AcessoUncheckedUpdateManyInput = {
    idAcesso?: IntFieldUpdateOperationsInput | number
    idCartao?: StringFieldUpdateOperationsInput | string
    idPorta?: StringFieldUpdateOperationsInput | string
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PortaListRelationFilter = {
    every?: PortaWhereInput
    some?: PortaWhereInput
    none?: PortaWhereInput
  }

  export type AcessoListRelationFilter = {
    every?: AcessoWhereInput
    some?: AcessoWhereInput
    none?: AcessoWhereInput
  }

  export type PortaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AcessoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartaoCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CartaoMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CartaoMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CartaoListRelationFilter = {
    every?: CartaoWhereInput
    some?: CartaoWhereInput
    none?: CartaoWhereInput
  }

  export type CartaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PortaCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PortaMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PortaMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CartaoRelationFilter = {
    is?: CartaoWhereInput
    isNot?: CartaoWhereInput
  }

  export type PortaRelationFilter = {
    is?: PortaWhereInput
    isNot?: PortaWhereInput
  }

  export type AcessoCountOrderByAggregateInput = {
    idAcesso?: SortOrder
    idCartao?: SortOrder
    idPorta?: SortOrder
    dataInteracao?: SortOrder
    liberado?: SortOrder
  }

  export type AcessoAvgOrderByAggregateInput = {
    idAcesso?: SortOrder
  }

  export type AcessoMaxOrderByAggregateInput = {
    idAcesso?: SortOrder
    idCartao?: SortOrder
    idPorta?: SortOrder
    dataInteracao?: SortOrder
    liberado?: SortOrder
  }

  export type AcessoMinOrderByAggregateInput = {
    idAcesso?: SortOrder
    idCartao?: SortOrder
    idPorta?: SortOrder
    dataInteracao?: SortOrder
    liberado?: SortOrder
  }

  export type AcessoSumOrderByAggregateInput = {
    idAcesso?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PortaCreateNestedManyWithoutCartoesPermitidosInput = {
    create?: XOR<PortaCreateWithoutCartoesPermitidosInput, PortaUncheckedCreateWithoutCartoesPermitidosInput> | PortaCreateWithoutCartoesPermitidosInput[] | PortaUncheckedCreateWithoutCartoesPermitidosInput[]
    connectOrCreate?: PortaCreateOrConnectWithoutCartoesPermitidosInput | PortaCreateOrConnectWithoutCartoesPermitidosInput[]
    connect?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
  }

  export type AcessoCreateNestedManyWithoutCartaoInput = {
    create?: XOR<AcessoCreateWithoutCartaoInput, AcessoUncheckedCreateWithoutCartaoInput> | AcessoCreateWithoutCartaoInput[] | AcessoUncheckedCreateWithoutCartaoInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutCartaoInput | AcessoCreateOrConnectWithoutCartaoInput[]
    createMany?: AcessoCreateManyCartaoInputEnvelope
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
  }

  export type PortaUncheckedCreateNestedManyWithoutCartoesPermitidosInput = {
    create?: XOR<PortaCreateWithoutCartoesPermitidosInput, PortaUncheckedCreateWithoutCartoesPermitidosInput> | PortaCreateWithoutCartoesPermitidosInput[] | PortaUncheckedCreateWithoutCartoesPermitidosInput[]
    connectOrCreate?: PortaCreateOrConnectWithoutCartoesPermitidosInput | PortaCreateOrConnectWithoutCartoesPermitidosInput[]
    connect?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
  }

  export type AcessoUncheckedCreateNestedManyWithoutCartaoInput = {
    create?: XOR<AcessoCreateWithoutCartaoInput, AcessoUncheckedCreateWithoutCartaoInput> | AcessoCreateWithoutCartaoInput[] | AcessoUncheckedCreateWithoutCartaoInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutCartaoInput | AcessoCreateOrConnectWithoutCartaoInput[]
    createMany?: AcessoCreateManyCartaoInputEnvelope
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PortaUpdateManyWithoutCartoesPermitidosNestedInput = {
    create?: XOR<PortaCreateWithoutCartoesPermitidosInput, PortaUncheckedCreateWithoutCartoesPermitidosInput> | PortaCreateWithoutCartoesPermitidosInput[] | PortaUncheckedCreateWithoutCartoesPermitidosInput[]
    connectOrCreate?: PortaCreateOrConnectWithoutCartoesPermitidosInput | PortaCreateOrConnectWithoutCartoesPermitidosInput[]
    upsert?: PortaUpsertWithWhereUniqueWithoutCartoesPermitidosInput | PortaUpsertWithWhereUniqueWithoutCartoesPermitidosInput[]
    set?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    disconnect?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    delete?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    connect?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    update?: PortaUpdateWithWhereUniqueWithoutCartoesPermitidosInput | PortaUpdateWithWhereUniqueWithoutCartoesPermitidosInput[]
    updateMany?: PortaUpdateManyWithWhereWithoutCartoesPermitidosInput | PortaUpdateManyWithWhereWithoutCartoesPermitidosInput[]
    deleteMany?: PortaScalarWhereInput | PortaScalarWhereInput[]
  }

  export type AcessoUpdateManyWithoutCartaoNestedInput = {
    create?: XOR<AcessoCreateWithoutCartaoInput, AcessoUncheckedCreateWithoutCartaoInput> | AcessoCreateWithoutCartaoInput[] | AcessoUncheckedCreateWithoutCartaoInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutCartaoInput | AcessoCreateOrConnectWithoutCartaoInput[]
    upsert?: AcessoUpsertWithWhereUniqueWithoutCartaoInput | AcessoUpsertWithWhereUniqueWithoutCartaoInput[]
    createMany?: AcessoCreateManyCartaoInputEnvelope
    set?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    disconnect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    delete?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    update?: AcessoUpdateWithWhereUniqueWithoutCartaoInput | AcessoUpdateWithWhereUniqueWithoutCartaoInput[]
    updateMany?: AcessoUpdateManyWithWhereWithoutCartaoInput | AcessoUpdateManyWithWhereWithoutCartaoInput[]
    deleteMany?: AcessoScalarWhereInput | AcessoScalarWhereInput[]
  }

  export type PortaUncheckedUpdateManyWithoutCartoesPermitidosNestedInput = {
    create?: XOR<PortaCreateWithoutCartoesPermitidosInput, PortaUncheckedCreateWithoutCartoesPermitidosInput> | PortaCreateWithoutCartoesPermitidosInput[] | PortaUncheckedCreateWithoutCartoesPermitidosInput[]
    connectOrCreate?: PortaCreateOrConnectWithoutCartoesPermitidosInput | PortaCreateOrConnectWithoutCartoesPermitidosInput[]
    upsert?: PortaUpsertWithWhereUniqueWithoutCartoesPermitidosInput | PortaUpsertWithWhereUniqueWithoutCartoesPermitidosInput[]
    set?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    disconnect?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    delete?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    connect?: PortaWhereUniqueInput | PortaWhereUniqueInput[]
    update?: PortaUpdateWithWhereUniqueWithoutCartoesPermitidosInput | PortaUpdateWithWhereUniqueWithoutCartoesPermitidosInput[]
    updateMany?: PortaUpdateManyWithWhereWithoutCartoesPermitidosInput | PortaUpdateManyWithWhereWithoutCartoesPermitidosInput[]
    deleteMany?: PortaScalarWhereInput | PortaScalarWhereInput[]
  }

  export type AcessoUncheckedUpdateManyWithoutCartaoNestedInput = {
    create?: XOR<AcessoCreateWithoutCartaoInput, AcessoUncheckedCreateWithoutCartaoInput> | AcessoCreateWithoutCartaoInput[] | AcessoUncheckedCreateWithoutCartaoInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutCartaoInput | AcessoCreateOrConnectWithoutCartaoInput[]
    upsert?: AcessoUpsertWithWhereUniqueWithoutCartaoInput | AcessoUpsertWithWhereUniqueWithoutCartaoInput[]
    createMany?: AcessoCreateManyCartaoInputEnvelope
    set?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    disconnect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    delete?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    update?: AcessoUpdateWithWhereUniqueWithoutCartaoInput | AcessoUpdateWithWhereUniqueWithoutCartaoInput[]
    updateMany?: AcessoUpdateManyWithWhereWithoutCartaoInput | AcessoUpdateManyWithWhereWithoutCartaoInput[]
    deleteMany?: AcessoScalarWhereInput | AcessoScalarWhereInput[]
  }

  export type CartaoCreateNestedManyWithoutPortasPermitidasInput = {
    create?: XOR<CartaoCreateWithoutPortasPermitidasInput, CartaoUncheckedCreateWithoutPortasPermitidasInput> | CartaoCreateWithoutPortasPermitidasInput[] | CartaoUncheckedCreateWithoutPortasPermitidasInput[]
    connectOrCreate?: CartaoCreateOrConnectWithoutPortasPermitidasInput | CartaoCreateOrConnectWithoutPortasPermitidasInput[]
    connect?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
  }

  export type AcessoCreateNestedManyWithoutPortaInput = {
    create?: XOR<AcessoCreateWithoutPortaInput, AcessoUncheckedCreateWithoutPortaInput> | AcessoCreateWithoutPortaInput[] | AcessoUncheckedCreateWithoutPortaInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutPortaInput | AcessoCreateOrConnectWithoutPortaInput[]
    createMany?: AcessoCreateManyPortaInputEnvelope
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
  }

  export type CartaoUncheckedCreateNestedManyWithoutPortasPermitidasInput = {
    create?: XOR<CartaoCreateWithoutPortasPermitidasInput, CartaoUncheckedCreateWithoutPortasPermitidasInput> | CartaoCreateWithoutPortasPermitidasInput[] | CartaoUncheckedCreateWithoutPortasPermitidasInput[]
    connectOrCreate?: CartaoCreateOrConnectWithoutPortasPermitidasInput | CartaoCreateOrConnectWithoutPortasPermitidasInput[]
    connect?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
  }

  export type AcessoUncheckedCreateNestedManyWithoutPortaInput = {
    create?: XOR<AcessoCreateWithoutPortaInput, AcessoUncheckedCreateWithoutPortaInput> | AcessoCreateWithoutPortaInput[] | AcessoUncheckedCreateWithoutPortaInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutPortaInput | AcessoCreateOrConnectWithoutPortaInput[]
    createMany?: AcessoCreateManyPortaInputEnvelope
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
  }

  export type CartaoUpdateManyWithoutPortasPermitidasNestedInput = {
    create?: XOR<CartaoCreateWithoutPortasPermitidasInput, CartaoUncheckedCreateWithoutPortasPermitidasInput> | CartaoCreateWithoutPortasPermitidasInput[] | CartaoUncheckedCreateWithoutPortasPermitidasInput[]
    connectOrCreate?: CartaoCreateOrConnectWithoutPortasPermitidasInput | CartaoCreateOrConnectWithoutPortasPermitidasInput[]
    upsert?: CartaoUpsertWithWhereUniqueWithoutPortasPermitidasInput | CartaoUpsertWithWhereUniqueWithoutPortasPermitidasInput[]
    set?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    disconnect?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    delete?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    connect?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    update?: CartaoUpdateWithWhereUniqueWithoutPortasPermitidasInput | CartaoUpdateWithWhereUniqueWithoutPortasPermitidasInput[]
    updateMany?: CartaoUpdateManyWithWhereWithoutPortasPermitidasInput | CartaoUpdateManyWithWhereWithoutPortasPermitidasInput[]
    deleteMany?: CartaoScalarWhereInput | CartaoScalarWhereInput[]
  }

  export type AcessoUpdateManyWithoutPortaNestedInput = {
    create?: XOR<AcessoCreateWithoutPortaInput, AcessoUncheckedCreateWithoutPortaInput> | AcessoCreateWithoutPortaInput[] | AcessoUncheckedCreateWithoutPortaInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutPortaInput | AcessoCreateOrConnectWithoutPortaInput[]
    upsert?: AcessoUpsertWithWhereUniqueWithoutPortaInput | AcessoUpsertWithWhereUniqueWithoutPortaInput[]
    createMany?: AcessoCreateManyPortaInputEnvelope
    set?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    disconnect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    delete?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    update?: AcessoUpdateWithWhereUniqueWithoutPortaInput | AcessoUpdateWithWhereUniqueWithoutPortaInput[]
    updateMany?: AcessoUpdateManyWithWhereWithoutPortaInput | AcessoUpdateManyWithWhereWithoutPortaInput[]
    deleteMany?: AcessoScalarWhereInput | AcessoScalarWhereInput[]
  }

  export type CartaoUncheckedUpdateManyWithoutPortasPermitidasNestedInput = {
    create?: XOR<CartaoCreateWithoutPortasPermitidasInput, CartaoUncheckedCreateWithoutPortasPermitidasInput> | CartaoCreateWithoutPortasPermitidasInput[] | CartaoUncheckedCreateWithoutPortasPermitidasInput[]
    connectOrCreate?: CartaoCreateOrConnectWithoutPortasPermitidasInput | CartaoCreateOrConnectWithoutPortasPermitidasInput[]
    upsert?: CartaoUpsertWithWhereUniqueWithoutPortasPermitidasInput | CartaoUpsertWithWhereUniqueWithoutPortasPermitidasInput[]
    set?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    disconnect?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    delete?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    connect?: CartaoWhereUniqueInput | CartaoWhereUniqueInput[]
    update?: CartaoUpdateWithWhereUniqueWithoutPortasPermitidasInput | CartaoUpdateWithWhereUniqueWithoutPortasPermitidasInput[]
    updateMany?: CartaoUpdateManyWithWhereWithoutPortasPermitidasInput | CartaoUpdateManyWithWhereWithoutPortasPermitidasInput[]
    deleteMany?: CartaoScalarWhereInput | CartaoScalarWhereInput[]
  }

  export type AcessoUncheckedUpdateManyWithoutPortaNestedInput = {
    create?: XOR<AcessoCreateWithoutPortaInput, AcessoUncheckedCreateWithoutPortaInput> | AcessoCreateWithoutPortaInput[] | AcessoUncheckedCreateWithoutPortaInput[]
    connectOrCreate?: AcessoCreateOrConnectWithoutPortaInput | AcessoCreateOrConnectWithoutPortaInput[]
    upsert?: AcessoUpsertWithWhereUniqueWithoutPortaInput | AcessoUpsertWithWhereUniqueWithoutPortaInput[]
    createMany?: AcessoCreateManyPortaInputEnvelope
    set?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    disconnect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    delete?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    connect?: AcessoWhereUniqueInput | AcessoWhereUniqueInput[]
    update?: AcessoUpdateWithWhereUniqueWithoutPortaInput | AcessoUpdateWithWhereUniqueWithoutPortaInput[]
    updateMany?: AcessoUpdateManyWithWhereWithoutPortaInput | AcessoUpdateManyWithWhereWithoutPortaInput[]
    deleteMany?: AcessoScalarWhereInput | AcessoScalarWhereInput[]
  }

  export type CartaoCreateNestedOneWithoutAcessosInput = {
    create?: XOR<CartaoCreateWithoutAcessosInput, CartaoUncheckedCreateWithoutAcessosInput>
    connectOrCreate?: CartaoCreateOrConnectWithoutAcessosInput
    connect?: CartaoWhereUniqueInput
  }

  export type PortaCreateNestedOneWithoutAcessosInput = {
    create?: XOR<PortaCreateWithoutAcessosInput, PortaUncheckedCreateWithoutAcessosInput>
    connectOrCreate?: PortaCreateOrConnectWithoutAcessosInput
    connect?: PortaWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CartaoUpdateOneRequiredWithoutAcessosNestedInput = {
    create?: XOR<CartaoCreateWithoutAcessosInput, CartaoUncheckedCreateWithoutAcessosInput>
    connectOrCreate?: CartaoCreateOrConnectWithoutAcessosInput
    upsert?: CartaoUpsertWithoutAcessosInput
    connect?: CartaoWhereUniqueInput
    update?: XOR<XOR<CartaoUpdateToOneWithWhereWithoutAcessosInput, CartaoUpdateWithoutAcessosInput>, CartaoUncheckedUpdateWithoutAcessosInput>
  }

  export type PortaUpdateOneRequiredWithoutAcessosNestedInput = {
    create?: XOR<PortaCreateWithoutAcessosInput, PortaUncheckedCreateWithoutAcessosInput>
    connectOrCreate?: PortaCreateOrConnectWithoutAcessosInput
    upsert?: PortaUpsertWithoutAcessosInput
    connect?: PortaWhereUniqueInput
    update?: XOR<XOR<PortaUpdateToOneWithWhereWithoutAcessosInput, PortaUpdateWithoutAcessosInput>, PortaUncheckedUpdateWithoutAcessosInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PortaCreateWithoutCartoesPermitidosInput = {
    id?: string
    Acessos?: AcessoCreateNestedManyWithoutPortaInput
  }

  export type PortaUncheckedCreateWithoutCartoesPermitidosInput = {
    id?: string
    Acessos?: AcessoUncheckedCreateNestedManyWithoutPortaInput
  }

  export type PortaCreateOrConnectWithoutCartoesPermitidosInput = {
    where: PortaWhereUniqueInput
    create: XOR<PortaCreateWithoutCartoesPermitidosInput, PortaUncheckedCreateWithoutCartoesPermitidosInput>
  }

  export type AcessoCreateWithoutCartaoInput = {
    dataInteracao: Date | string
    liberado: boolean
    porta: PortaCreateNestedOneWithoutAcessosInput
  }

  export type AcessoUncheckedCreateWithoutCartaoInput = {
    idAcesso?: number
    idPorta: string
    dataInteracao: Date | string
    liberado: boolean
  }

  export type AcessoCreateOrConnectWithoutCartaoInput = {
    where: AcessoWhereUniqueInput
    create: XOR<AcessoCreateWithoutCartaoInput, AcessoUncheckedCreateWithoutCartaoInput>
  }

  export type AcessoCreateManyCartaoInputEnvelope = {
    data: AcessoCreateManyCartaoInput | AcessoCreateManyCartaoInput[]
  }

  export type PortaUpsertWithWhereUniqueWithoutCartoesPermitidosInput = {
    where: PortaWhereUniqueInput
    update: XOR<PortaUpdateWithoutCartoesPermitidosInput, PortaUncheckedUpdateWithoutCartoesPermitidosInput>
    create: XOR<PortaCreateWithoutCartoesPermitidosInput, PortaUncheckedCreateWithoutCartoesPermitidosInput>
  }

  export type PortaUpdateWithWhereUniqueWithoutCartoesPermitidosInput = {
    where: PortaWhereUniqueInput
    data: XOR<PortaUpdateWithoutCartoesPermitidosInput, PortaUncheckedUpdateWithoutCartoesPermitidosInput>
  }

  export type PortaUpdateManyWithWhereWithoutCartoesPermitidosInput = {
    where: PortaScalarWhereInput
    data: XOR<PortaUpdateManyMutationInput, PortaUncheckedUpdateManyWithoutCartoesPermitidosInput>
  }

  export type PortaScalarWhereInput = {
    AND?: PortaScalarWhereInput | PortaScalarWhereInput[]
    OR?: PortaScalarWhereInput[]
    NOT?: PortaScalarWhereInput | PortaScalarWhereInput[]
    id?: StringFilter<"Porta"> | string
  }

  export type AcessoUpsertWithWhereUniqueWithoutCartaoInput = {
    where: AcessoWhereUniqueInput
    update: XOR<AcessoUpdateWithoutCartaoInput, AcessoUncheckedUpdateWithoutCartaoInput>
    create: XOR<AcessoCreateWithoutCartaoInput, AcessoUncheckedCreateWithoutCartaoInput>
  }

  export type AcessoUpdateWithWhereUniqueWithoutCartaoInput = {
    where: AcessoWhereUniqueInput
    data: XOR<AcessoUpdateWithoutCartaoInput, AcessoUncheckedUpdateWithoutCartaoInput>
  }

  export type AcessoUpdateManyWithWhereWithoutCartaoInput = {
    where: AcessoScalarWhereInput
    data: XOR<AcessoUpdateManyMutationInput, AcessoUncheckedUpdateManyWithoutCartaoInput>
  }

  export type AcessoScalarWhereInput = {
    AND?: AcessoScalarWhereInput | AcessoScalarWhereInput[]
    OR?: AcessoScalarWhereInput[]
    NOT?: AcessoScalarWhereInput | AcessoScalarWhereInput[]
    idAcesso?: IntFilter<"Acesso"> | number
    idCartao?: StringFilter<"Acesso"> | string
    idPorta?: StringFilter<"Acesso"> | string
    dataInteracao?: DateTimeFilter<"Acesso"> | Date | string
    liberado?: BoolFilter<"Acesso"> | boolean
  }

  export type CartaoCreateWithoutPortasPermitidasInput = {
    id?: string
    Acessos?: AcessoCreateNestedManyWithoutCartaoInput
  }

  export type CartaoUncheckedCreateWithoutPortasPermitidasInput = {
    id?: string
    Acessos?: AcessoUncheckedCreateNestedManyWithoutCartaoInput
  }

  export type CartaoCreateOrConnectWithoutPortasPermitidasInput = {
    where: CartaoWhereUniqueInput
    create: XOR<CartaoCreateWithoutPortasPermitidasInput, CartaoUncheckedCreateWithoutPortasPermitidasInput>
  }

  export type AcessoCreateWithoutPortaInput = {
    dataInteracao: Date | string
    liberado: boolean
    cartao: CartaoCreateNestedOneWithoutAcessosInput
  }

  export type AcessoUncheckedCreateWithoutPortaInput = {
    idAcesso?: number
    idCartao: string
    dataInteracao: Date | string
    liberado: boolean
  }

  export type AcessoCreateOrConnectWithoutPortaInput = {
    where: AcessoWhereUniqueInput
    create: XOR<AcessoCreateWithoutPortaInput, AcessoUncheckedCreateWithoutPortaInput>
  }

  export type AcessoCreateManyPortaInputEnvelope = {
    data: AcessoCreateManyPortaInput | AcessoCreateManyPortaInput[]
  }

  export type CartaoUpsertWithWhereUniqueWithoutPortasPermitidasInput = {
    where: CartaoWhereUniqueInput
    update: XOR<CartaoUpdateWithoutPortasPermitidasInput, CartaoUncheckedUpdateWithoutPortasPermitidasInput>
    create: XOR<CartaoCreateWithoutPortasPermitidasInput, CartaoUncheckedCreateWithoutPortasPermitidasInput>
  }

  export type CartaoUpdateWithWhereUniqueWithoutPortasPermitidasInput = {
    where: CartaoWhereUniqueInput
    data: XOR<CartaoUpdateWithoutPortasPermitidasInput, CartaoUncheckedUpdateWithoutPortasPermitidasInput>
  }

  export type CartaoUpdateManyWithWhereWithoutPortasPermitidasInput = {
    where: CartaoScalarWhereInput
    data: XOR<CartaoUpdateManyMutationInput, CartaoUncheckedUpdateManyWithoutPortasPermitidasInput>
  }

  export type CartaoScalarWhereInput = {
    AND?: CartaoScalarWhereInput | CartaoScalarWhereInput[]
    OR?: CartaoScalarWhereInput[]
    NOT?: CartaoScalarWhereInput | CartaoScalarWhereInput[]
    id?: StringFilter<"Cartao"> | string
  }

  export type AcessoUpsertWithWhereUniqueWithoutPortaInput = {
    where: AcessoWhereUniqueInput
    update: XOR<AcessoUpdateWithoutPortaInput, AcessoUncheckedUpdateWithoutPortaInput>
    create: XOR<AcessoCreateWithoutPortaInput, AcessoUncheckedCreateWithoutPortaInput>
  }

  export type AcessoUpdateWithWhereUniqueWithoutPortaInput = {
    where: AcessoWhereUniqueInput
    data: XOR<AcessoUpdateWithoutPortaInput, AcessoUncheckedUpdateWithoutPortaInput>
  }

  export type AcessoUpdateManyWithWhereWithoutPortaInput = {
    where: AcessoScalarWhereInput
    data: XOR<AcessoUpdateManyMutationInput, AcessoUncheckedUpdateManyWithoutPortaInput>
  }

  export type CartaoCreateWithoutAcessosInput = {
    id?: string
    PortasPermitidas?: PortaCreateNestedManyWithoutCartoesPermitidosInput
  }

  export type CartaoUncheckedCreateWithoutAcessosInput = {
    id?: string
    PortasPermitidas?: PortaUncheckedCreateNestedManyWithoutCartoesPermitidosInput
  }

  export type CartaoCreateOrConnectWithoutAcessosInput = {
    where: CartaoWhereUniqueInput
    create: XOR<CartaoCreateWithoutAcessosInput, CartaoUncheckedCreateWithoutAcessosInput>
  }

  export type PortaCreateWithoutAcessosInput = {
    id?: string
    CartoesPermitidos?: CartaoCreateNestedManyWithoutPortasPermitidasInput
  }

  export type PortaUncheckedCreateWithoutAcessosInput = {
    id?: string
    CartoesPermitidos?: CartaoUncheckedCreateNestedManyWithoutPortasPermitidasInput
  }

  export type PortaCreateOrConnectWithoutAcessosInput = {
    where: PortaWhereUniqueInput
    create: XOR<PortaCreateWithoutAcessosInput, PortaUncheckedCreateWithoutAcessosInput>
  }

  export type CartaoUpsertWithoutAcessosInput = {
    update: XOR<CartaoUpdateWithoutAcessosInput, CartaoUncheckedUpdateWithoutAcessosInput>
    create: XOR<CartaoCreateWithoutAcessosInput, CartaoUncheckedCreateWithoutAcessosInput>
    where?: CartaoWhereInput
  }

  export type CartaoUpdateToOneWithWhereWithoutAcessosInput = {
    where?: CartaoWhereInput
    data: XOR<CartaoUpdateWithoutAcessosInput, CartaoUncheckedUpdateWithoutAcessosInput>
  }

  export type CartaoUpdateWithoutAcessosInput = {
    id?: StringFieldUpdateOperationsInput | string
    PortasPermitidas?: PortaUpdateManyWithoutCartoesPermitidosNestedInput
  }

  export type CartaoUncheckedUpdateWithoutAcessosInput = {
    id?: StringFieldUpdateOperationsInput | string
    PortasPermitidas?: PortaUncheckedUpdateManyWithoutCartoesPermitidosNestedInput
  }

  export type PortaUpsertWithoutAcessosInput = {
    update: XOR<PortaUpdateWithoutAcessosInput, PortaUncheckedUpdateWithoutAcessosInput>
    create: XOR<PortaCreateWithoutAcessosInput, PortaUncheckedCreateWithoutAcessosInput>
    where?: PortaWhereInput
  }

  export type PortaUpdateToOneWithWhereWithoutAcessosInput = {
    where?: PortaWhereInput
    data: XOR<PortaUpdateWithoutAcessosInput, PortaUncheckedUpdateWithoutAcessosInput>
  }

  export type PortaUpdateWithoutAcessosInput = {
    id?: StringFieldUpdateOperationsInput | string
    CartoesPermitidos?: CartaoUpdateManyWithoutPortasPermitidasNestedInput
  }

  export type PortaUncheckedUpdateWithoutAcessosInput = {
    id?: StringFieldUpdateOperationsInput | string
    CartoesPermitidos?: CartaoUncheckedUpdateManyWithoutPortasPermitidasNestedInput
  }

  export type AcessoCreateManyCartaoInput = {
    idAcesso?: number
    idPorta: string
    dataInteracao: Date | string
    liberado: boolean
  }

  export type PortaUpdateWithoutCartoesPermitidosInput = {
    id?: StringFieldUpdateOperationsInput | string
    Acessos?: AcessoUpdateManyWithoutPortaNestedInput
  }

  export type PortaUncheckedUpdateWithoutCartoesPermitidosInput = {
    id?: StringFieldUpdateOperationsInput | string
    Acessos?: AcessoUncheckedUpdateManyWithoutPortaNestedInput
  }

  export type PortaUncheckedUpdateManyWithoutCartoesPermitidosInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AcessoUpdateWithoutCartaoInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
    porta?: PortaUpdateOneRequiredWithoutAcessosNestedInput
  }

  export type AcessoUncheckedUpdateWithoutCartaoInput = {
    idAcesso?: IntFieldUpdateOperationsInput | number
    idPorta?: StringFieldUpdateOperationsInput | string
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AcessoUncheckedUpdateManyWithoutCartaoInput = {
    idAcesso?: IntFieldUpdateOperationsInput | number
    idPorta?: StringFieldUpdateOperationsInput | string
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AcessoCreateManyPortaInput = {
    idAcesso?: number
    idCartao: string
    dataInteracao: Date | string
    liberado: boolean
  }

  export type CartaoUpdateWithoutPortasPermitidasInput = {
    id?: StringFieldUpdateOperationsInput | string
    Acessos?: AcessoUpdateManyWithoutCartaoNestedInput
  }

  export type CartaoUncheckedUpdateWithoutPortasPermitidasInput = {
    id?: StringFieldUpdateOperationsInput | string
    Acessos?: AcessoUncheckedUpdateManyWithoutCartaoNestedInput
  }

  export type CartaoUncheckedUpdateManyWithoutPortasPermitidasInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AcessoUpdateWithoutPortaInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
    cartao?: CartaoUpdateOneRequiredWithoutAcessosNestedInput
  }

  export type AcessoUncheckedUpdateWithoutPortaInput = {
    idAcesso?: IntFieldUpdateOperationsInput | number
    idCartao?: StringFieldUpdateOperationsInput | string
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AcessoUncheckedUpdateManyWithoutPortaInput = {
    idAcesso?: IntFieldUpdateOperationsInput | number
    idCartao?: StringFieldUpdateOperationsInput | string
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    liberado?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CartaoCountOutputTypeDefaultArgs instead
     */
    export type CartaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PortaCountOutputTypeDefaultArgs instead
     */
    export type PortaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PortaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CartaoDefaultArgs instead
     */
    export type CartaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PortaDefaultArgs instead
     */
    export type PortaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PortaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AcessoDefaultArgs instead
     */
    export type AcessoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AcessoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}